apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion _compileSdkVersion
    flavorDimensions 'water', '360'
    defaultConfig {
        applicationId "plugin.tb.com.tbplugin"
        minSdkVersion _minSdkVersion
        targetSdkVersion _targetSdkVersion
        versionCode _versionCode
        versionName _versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    productFlavors {
        water {
            dimension 'water'
            versionNameSuffix '.5'
            applicationIdSuffix '.water'
            // 动态添加 string.xml 字段；
            // 注意，这里是添加，在 string.xml 不能有这个字段，会重名！！！
//            resValue "string", "app_name", "water_tbPlugin"
            // 动态修改 常量 字段
            buildConfigField "String", "ENVIRONMENT", '"water"'
            // 修改 AndroidManifest.xml 里渠道变量
//            manifestPlaceholders = [ENVIRONMENT: "water"]
        }
        t360 {
            dimension '360'
            versionName '2.3'
            applicationId 'com.tb.t360'
//            resValue "string", "app_name", "t360_tbPlugin"
            buildConfigField "String", "ENVIRONMENT", '"t360"'
//            manifestPlaceholders = [ENVIRONMENT: "t360"]
        }
        xiaomi {
            dimension '360'
//            resValue "string", "app_name", "xiaomi_tbPlugin"
            buildConfigField "String", "ENVIRONMENT", '"xiaomi"'
//            manifestPlaceholders = [ENVIRONMENT: "xiaomi"]
        }
    }
    productFlavors.all {
        manifestPlaceholders = [ENVIRONMENT: it.name]
        resValue "string", "app_name", "${it.name}_tbPlugin"
//        String bcf="${it.name}"
//        buildConfigField "String", "ENVIRONMENT", '"$bcf"'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }

    applicationVariants.all { variant ->
//        variant.packageApplication.outputDirectory = new File("/Users/tb/Desktop/${rootProject.name}${variant.buildType.name}")
        variant.outputs.all {
//            println ">>>"+owner.versionName
//            println ">>>${it.name}***${it.baseName}***${it.dirName}"
//            println ">>>"+it.outputFile.absolutePath
//            println ">>>" + it.outputFile.name + "***" + it.versionCode
//            println ">>>${getDateAndTime()}"
//            println variant.flavorName+"***"+variant.versionCode+"***"+variant.name+"***"+variant.applicationId

            //android gradle3.0以上
            def fileName = "${project.name}_${variant.flavorName}_${variant.buildType.name}_V${variant.versionName.replace('.', '')}_${getDateAndTime()}.apk"
            println ">>>" + fileName
            outputFileName = fileName

            //3.0以下
//            def outputFile=it.outputFile
//            if (outputFile != null && outputFile.name.endsWith(".apk")) {
//                println ">>>" + fileName
//                it.outputFile = new File(outputFile.parent, fileName)
//            } else {
//                println it.outputFile.absolutePath
//            }
        }
    }
}

def getDateAndTime() {
    new Date().format("yyyyMMddHHmmss",TimeZone.getTimeZone("GMT+08:00"))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0-alpha3'
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
}
repositories {
    mavenCentral()
}
